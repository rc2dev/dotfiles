#!/bin/bash
# Copyright (C) 2019 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

readonly kodi_api="http://localhost:80/jsonrpc" # osmc binds it to port 80, default is 8080
declare -Ar services=(
	[Dispmanx]="dispmanx"
	[Fail2Ban]="fail2ban"
	[Kodi]="kodi"
	[Ngrok]="ngrok"
)

status_services() {
	# Workaround for aliased unit, systemd < 237
	systemctl show kodi > /dev/null 2>&1

	local list_units=$(systemctl list-unit-files)
	for label in "${!services[@]}"; do
		unit="${services[$label]}"

		if grep -Fq "$unit" <<<"$list_units"; then
			printf "%-15s%s\n" "$label" "$(systemctl is-active "$unit")"
		fi
	done
}

status_kodi() {
	local kodi_active_players=$(curl -s \
		--data-binary '{"jsonrpc": "2.0", "method": "Player.GetActivePlayers", "id":1}' \
		-H 'content-type: application/json;' "$kodi_api" | jq .result)

	if [[ "$kodi_active_players" == "[]" ]]; then
		printf "Kodi is idle\n"
	elif [[ "$kodi_active_players" == "" ]]; then
		printf "Kodi doesn't seem to be running\n"
	else
		printf "Kodi has ACTIVE MEDIA\n"
	fi
}

status_system() {
	free | awk 'NR==2{printf("Mem:  %.1f%%\n", $3/$2 * 100)}'
	df / | awk 'NR==2{printf("Disk: %.1f%% (%.1fG available)\n", $3/$2 *100, $4/(1024*1024))}'
	/opt/vc/bin/vcgencmd measure_temp | awk -F "=" '{printf("Temp: %s\n", $2)}'
	iwconfig 2> /dev/null | grep Link | awk '{print $2}' | awk -F "=" '{printf("WiFi: %s\n", $2)}'
	uptime -p
}

has_kodi() {
	command -v kodi >/dev/null
}

main() {
	status_services | sort
	printf "\n"

	has_kodi && status_kodi
	printf "\n"

	status_system
}

main "$@"
