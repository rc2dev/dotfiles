#!/usr/bin/env bash
#
# Copyright (C) 2020-2023 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

set -euo pipefail
readonly script_name="$(basename "$0")"
readonly pid_file="/var/run/user/$UID/$script_name.pid"
readonly cache_dir="$HOME/.cache/dwm-status"
readonly sep=" ÔΩú "
readonly interval="5s"

bar_player() {
  local -r status="$(playerctl status 2>/dev/null)"

  [[ "$status" =~ (Playing|Paused) ]] || return 0

  # Reverse to match mpv
  case $status in
    Playing) local -r icon=ÔÅå;;
    Paused) local -r icon=ÔÅã;;
  esac
  local -r title="$(playerctl metadata --format "[{{ playerName }}] {{ trunc(title, 20) }}")"

  echo "${icon} ${title}"
}

bar_time() {
  date +"%a %d %R"
}

bar_mem() {
  echo "Ôãõ $(free -h | awk '/^Mem:/ {print $3}')"
}

bar_temp() {
  local -r raw="/sys/class/thermal/thermal_zone0/temp"
  echo "Ôãâ $(cut -c1-2 < "$raw")¬∞C"
}

bar_battery() {
  local -r battery="/sys/class/power_supply/BAT0"
  if [[ ! -e "$battery" ]]; then
    return
  fi

  local -r status="$(cat "$battery/status")"
  local -r level="$(cat "$battery/capacity")"

  local icon
  case "$status" in
    "Full") icon="Û∞Åπ" ;;
    "Discharging")
      if [[ $level -gt 50 ]]; then icon="Û∞ÇÄ"
      elif [[ $level -gt 15 ]]; then icon="Û∞Åº"
      else icon="Û±Éç"
      fi
      ;;
    "Charging") icon="‚ö°" ;;
    "Not charging") icon="Û∞ô¶" ;;
    "Unknown") icon="ÔÑ®" ;;
  esac

  echo "$icon $level%"
}

bar_pomodoro() {
  pomodoro status --format "üçÖ %!R' %d"
}

bar_btc() {
  # Use a cache so we don't ping the website too often.
  local -r cache_btc="$cache_dir/btc"

  if [[
      ! -e "$cache_btc" ||  # no cache
      "$(find "$cache_btc" -mmin +1 | wc -l)" == "1" ||  # cache is old
      "$(wc --chars < "$cache_btc")" -le 3   # cache is empty
      ]]; then
    echo "ÔÖö $(curl --silent 'rate.sx/?T' | awk '($4=="BTC"){print $6}')" > "$cache_btc"
  fi

  cat "$cache_btc"
}

update() {
  declare -ar elements=(
    "$(bar_player)"
    "$(bar_pomodoro)"
    "$(bar_btc)"
    "$(bar_battery)"
    "$(bar_temp)"
    "$(bar_time)"
  )

  # Generate output string
  output="$(printf "\t%s" "${elements[@]}")"
  # Remove separator from beginning and duplicated
  output="$(sed -E 's/^\t*//; s/\t+/\t/g' <<< ${output})"
  # Place chosen separator
  output="$(sed "s/\t/$sep/g" <<< ${output})"
  # Add space to the end
  output="$output "

  xsetroot -name "$output"
}

ensure_one_instance() {
  if [[ -f "$pid_file" ]]; then
    kill "$(cat "$pid_file")" 2> /dev/null || true
  fi

  echo $$ > "$pid_file"
}

main() {
  ensure_one_instance
  mkdir -p "$cache_dir"

  while true; do
    update
    sleep "$interval"
  done
}

main "$@"
