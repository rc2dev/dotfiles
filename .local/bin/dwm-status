#!/usr/bin/env bash
#
# Copyright (C) 2020-2024 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

set -euo pipefail
readonly script_name="$(basename "$0")"
readonly pid_file="/var/run/user/$UID/$script_name.pid"
readonly cache_dir="$HOME/.cache/dwm-status"
readonly cache_btc="$cache_dir/btc"
readonly sep=" ｜ "
readonly interval="5s"
declare bg_pids

main() {
  ensure_only_instance
  mkdir -p "$cache_dir"

  run_bg_loops

  while true; do
    log "Updating bar..."
    update
    sleep "$interval"
  done
}

update() {
  declare -ar elements=(
    "$(bar_player)"
    "$(bar_btc)"
    "$(bar_battery)"
    "$(bar_temp)"
    "$(bar_time)"
  )

  # Generate output string
  output="$(printf "\t%s" "${elements[@]}")"
  # Remove separator from beginning and duplicated
  output="$(sed -E 's/^\t*//; s/\t+/\t/g' <<< ${output})"
  # Place chosen separator
  output="$(sed "s/\t/$sep/g" <<< ${output})"
  # Add space to the end
  output="$output "

  xsetroot -name "$output"
}

run_bg_loops() {
  for cmd in bg_get_btc; do
    $cmd &
    bg_pids="${bg_pids:-} $!"
  done

  # Kill background workers on exit
  trap "kill ${bg_pids:-}; exit" EXIT
}

bar_player() {
  [[ "$(playerctl status 2>/dev/null)" =~ (Playing|Paused) ]] || return 0

  local player_icon
  local -r player_name="$(playerctl metadata --format "{{ playerName }}")"
  case "$player_name" in
    chromium) player_icon= ;;
    mpv)      player_icon= ;;
    spotify)  player_icon= ;;
    *)        player_icon="$player_name" ;;
  esac

  playerctl metadata --format "$player_icon {{ emoji(status) }} {{ trunc(title, 20) }}"
}

bar_time() {
  date +"%a %d %R"
}

bar_temp() {
  local -r raw="/sys/class/thermal/thermal_zone0/temp"
  echo " $(cut -c1-2 < "$raw")°C"
}

bar_battery() {
  local -r battery="/sys/class/power_supply/BAT0"
  if [[ ! -e "$battery" ]]; then
    return
  fi

  local -r status="$(cat "$battery/status")"
  local -r level="$(cat "$battery/capacity")"

  local icon
  case "$status" in
    "Full") icon="󰁹" ;;
    "Discharging")
      if [[ $level -gt 50 ]]; then icon="󰂀"
      elif [[ $level -gt 15 ]]; then icon="󰁼"
      else icon="󱃍"
      fi
      ;;
    "Charging") icon="⚡" ;;
    "Not charging") icon="󰙦" ;;
    "Unknown") icon="" ;;
  esac

  echo "$icon $level%"
}

# Use a background loop for getting the value, so:
# - so we don't ping the website too often.
# - rendering the bar doesn't wait for remote server.
bar_btc() {
  local -r cache_max_min="+2"

  # Cache not found or too old
  if [[ ! -e "$cache_btc" || "$(find "$cache_btc" -mmin "$cache_max_min" | wc -l)" == "1" ]]; then
    return
  fi

  cat "$cache_btc"
}

bg_get_btc() {
  local -r interval_normal="60s"
  local -r interval_error="10s"
  local -r curl_max_sec=4
  local value

  while true; do
    log "BTC: Getting value from network..."
    value="$( (curl --silent --connect-timeout "$curl_max_sec" --max-time "$curl_max_sec" 'rate.sx/?T' || true) | awk '($4=="BTC"){print $6}')"
    log "BTC: Done."

    if [[ -z "${value:-}" ]]; then
      sleep "$interval_error"
    else
      echo " ${value}" > "$cache_btc"
      sleep "$interval_normal"
    fi
  done
}

ensure_only_instance() {
  if [[ -f "$pid_file" ]]; then
    local -r pid="$(cat "$pid_file")"
    log "Killing existing instance ($pid)..."
    kill "$pid" 2> /dev/null || true
  fi

  echo $$ > "$pid_file"
}

log() {
  printf "[%s] %s\n" "$(date +"%b %d %H:%M:%S")" "$*"
}

main "$@"
