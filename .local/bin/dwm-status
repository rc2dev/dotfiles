#!/usr/bin/env bash
#
# Copyright (C) 2020-2023 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

readonly script_name="$(basename "$0")"
readonly pid_file="/var/run/user/$UID/$script_name.pid"
readonly sep=" ｜ "
readonly interval="5s"

bar_player() {
  local -r status="$(playerctl status 2>/dev/null)"

  [[ "$status" =~ (Playing|Paused) ]] || return 0

  # Reverse to match mpv
  case $status in
    Playing) local -r icon=;;
    Paused) local -r icon=;;
  esac
  local -r title="$(playerctl metadata --format "{{ trunc(title, 20) }}")"

  echo "${icon} ${title}"
}

bar_time() {
  date +"%a %d %R"
}

bar_mem() {
  echo " $(free -h | awk '/^Mem:/ {print $3}')"
}

bar_temp() {
  local -r raw="/sys/class/thermal/thermal_zone0/temp"
  echo " $(cut -c1-2 < "$raw")°C"
}

bar_battery() {
  local -r battery="/sys/class/power_supply/BAT0"
  if [[ ! -e "$battery" ]]; then
    return
  fi

  local -r status="$(cat "$battery/status")"
  local -r level="$(cat "$battery/capacity")"

  local icon
  case "$status" in
    "Full") icon="󰁹" ;;
    "Discharging")
      if [[ $level -gt 50 ]]; then icon="󰂀"
      elif [[ $level -gt 15 ]]; then icon="󰁼"
      else icon="󱃍"
      fi
      ;;
    "Charging") icon="⚡" ;;
    "Not charging") icon="󰙦" ;;
    "Unknown") icon="" ;;
  esac

  echo "$icon $level%"
}

update() {
  declare -ar elements=(
    "$(bar_player)"
    "$(bar_battery)"
    "$(bar_temp)"
    "$(bar_time)"
  )

  # Generate output string
  output="$(printf "\t%s" "${elements[@]}")"
  # Remove separator from beginning and duplicated
  output="$(sed -E 's/^\t*//; s/\t+/\t/g' <<< ${output})"
  # Place chosen separator
  output="$(sed "s/\t/$sep/g" <<< ${output})"
  # Add space to the end
  output="$output "

  xsetroot -name "$output"
}

ensure_one_instance() {
  if [[ -f "$pid_file" ]]; then
    kill "$(cat "$pid_file")" 2> /dev/null || true
  fi

  echo $$ > "$pid_file"
}

main() {
  ensure_one_instance

  while true; do
    update
    sleep "$interval"
  done
}

main "$@"
