#!/usr/bin/env bash
#
# Copyright (C) 2020-2021 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

readonly sep="   "

truncate() {
  local -r max_len=25
  local -r str="$*"

  if [[ ${#str} -gt $max_len ]]; then
    local trunc="${str::(( max_len - 3 ))}"
    trunc="$(sed -e 's/[[:space:]]*$//' <<< "$trunc")" # Trim trailing space
    echo "$trunc..."
  else
    echo "$str"
  fi
}

bar_vol() {
  if [[ "$(pamixer --get-mute)" == "1" ]]; then
    local -r icon="üîá"
  else
    local -r icon="üîä"
  fi

  printf "%s %3d%%" "${icon}" "$(pamixer --get-volume | cut -f 1 -d ' ')"
}

bar_player() {
  local -r status="$(playerctl status 2>/dev/null)"

  [[ "$status" =~ (Playing|Paused) ]] || return 0

  case $status in
    Playing) local -r icon=ÔÅã;;
    Paused) local -r icon=ÔÅå;;
  esac

  # Calling metadata...
  #   - with --format: prevents mixing multiple players
  #   - only once: prevents racing conditions (mixing prev and next song)
  local -a metadata
  local -r NL=$'\n'
  mapfile -t metadata < <(playerctl metadata --format "{{ artist }}$NL{{ title }}")

  # Truncate long metadata
  local -r artist="$(truncate "${metadata[0]}")"
  local -r title="$(truncate "${metadata[1]}")"

  echo "${icon} ${artist:+$artist -} ${title}"
}

bar_time() {
  echo "ÔÅ≥ $(date +"%a, %d/%m %R")"
}

bar_mem() {
  echo "ÔÇÖ $(free -h | awk '/^Mem:/ {print $3}')"
}

bar_temp() {
  echo "Ôãâ $(sensors | awk '/^Package/ {print substr($4, 2)}')"
}


# Output currencies values, updating at interval
bar_currencies() {
  local -r currencies_regex="(BTC|ETH|ADA)"
  local -r interval=60
  local -r cache="$HOME/.cache/dwmbar_currencies"

  if [[ -e $cache && $(($(date +%s) - $(date +%s -r "$cache"))) -lt $interval ]]; then
    cat "$cache"
    return
  fi

  raw="$(curl -s 'rate.sx/?qFT&n=150')"

  local -r values="$(awk -v currency="$currencies_regex" '
    $0 ~ "[^[:alpha:]]"currency"[^[:alpha:]]" {
      if ($6 >= 100)
        printf " %d", $6
      else
        printf " %.2f", $6
     }
  ' <<< "$raw")"

  if [[ -z "$values" ]]; then
    return
  fi

  local -r output="\$$values"
  tee "$cache" <<< "$output"
}


bar_timew() {
  # --skip-dwmbar or we'll get into an infinite loop
  local -r status="$(timew --skip-dwmbar)"

  if [[ $(wc -l <<< "$status") -gt 1 ]]; then
    local -r tag="$(head -1 <<< "$status" | sed -e 's/^Tracking //' -e 's/"//g')"
    local -r time="$(sed -nE '4s/^\s+Total\s+//;4s/...$//p' <<< "$status")"
    echo "üñçÔ∏è $tag $time"
  fi

  notify_pomodoro "$time"
}

# Notify pomodoro on period and repeated periods.
# args:
# - elapsed time in h:mm format
notify_pomodoro() {
  local -r elapsed_hmm="$1"
  local -r elapsed="$(<<< "$elapsed_hmm" awk -F: '{ print ($1 * 60 + $2) }')"
  local -r period=25 # Pomodoro period in minutes
  local -r notified_file="${XDG_RUNTIME_DIR:-$HOME/.cache}/dwmbar_pomodoro_notified"

  if [[ $(( elapsed % period )) -eq 0 && $elapsed -gt 0 ]]; then
    if [[ ! -e "$notified_file" ]]; then
      notify-send "Pomodoro" "You worked $elapsed minutes. Get a rest."
      touch "$notified_file"
    fi
  else
    rm -rf "$notified_file"
  fi
}


declare -ar elements=(
  "$(bar_player)"
  "$(bar_temp)"
  "$(bar_mem)"
  "$(bar_time)"
)

# Generate output string
output="$(printf "\t%s" "${elements[@]}")"
# Remove separator from beginning and duplicated
output="$(sed 's/^\t*//; s/\t+/\t/g' <<< ${output})"
# Place chosen separator
output="$(sed "s/\t/$sep/g" <<< ${output})"
# Increase spacing for non-mono fonts
output="${output// /  }"

xsetroot -name "$output"

