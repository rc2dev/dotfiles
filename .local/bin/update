#!/usr/bin/env bash
#
# Commands to update my systems.
#
# Copyright (C) 2017-2022 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

set -euo pipefail

main() {
	declare -i step=0

	update_dotfiles
	update_git_repos

	# Only run if interactive
	if [[ -t 0 ]]; then
		update_distro
		update_flatpaks
		update_nvim_plugins
		update_tmux_plugins
		update_zsh_plugins
		update_submodules
	fi

	log "Concluído."
}

log() {
	printf "%s\n" "$*" 1>&2
}

log_step() {
	((step++)) || true

	log
	log "[ $step ] $*"
}

# args: prompt
# exit codes: 0 if yes, 1 if no
ask() {
	local -r prompt="$1"

	printf "\n"
	read -r -n 1 -p "> $prompt " answer
	printf "\n"

	if [[ ! "$answer" =~ [yYsS] ]]; then
		log "Pulando..."
		return 1
	fi

	return 0
}

has_command() {
	command -v "$1" > /dev/null
}

update_distro() {
	if has_command apt; then
		update_distro_apt
	elif has_command dnf; then
		update_distro_dnf
	else
		log "Atualização de pacotes não disponível para a sua distro."
	fi
}

update_distro_apt() {
	# Termux doesn't have sudo
	local sudo
	has_command sudo && sudo=sudo

	log_step "Atualizando pacotes do APT..."
	$sudo apt update && $sudo apt full-upgrade

	log_step "Executando apt autoremove..."
	$sudo apt autoremove --purge --yes

	log_step "Limpando cache do APT..."
	$sudo apt clean
}

update_distro_dnf() {
	log_step "Atualizando pacotes do DNF..."
	# Allow script to continue if user rejects operation
	sudo dnf upgrade --refresh || if (( $? == 1 )); then return 0; fi
}

update_flatpaks() {
	has_command flatpak || return 0

	log_step "Atualizando flatpaks..."
	# Allow script to continue if user rejects operation
	sudo flatpak update || if (( $? == 1 )); then return 0; fi
}

update_dotfiles() {
	has_command dotfiles || return 0

	log_step "Atualizando dotfiles..."
	dotfiles pull
}

update_submodules() {
	has_command dotfiles || return 0

	ask "Atualizar submódulos dos dotfiles?" || return 0

	log_step "Atualizando submódulos dos dotfiles..."
	dotfiles submodule update --recursive --remote
}

update_nvim_plugins() {
	has_command nvim || return 0

	log_step "Atualizando plugins do Neovim..."
	nvim +PlugClean! +PlugUpdate +qa!
}

update_tmux_plugins() {
	has_command tmux || return 0

	log_step "Atualizando plugins do tmux..."
	$HOME/.config/tmux/plugins/tpm/bin/update_plugins all
}
update_git_repos() {
	log_step "Atualizando repos em ~/..."

	# Don't output the glob if no directory found.
	shopt -s nullglob

	for i in \
		$HOME/.local/opt/*/.git \
		$HOME/.local/share/themes/*/.git \
		$HOME/.local/share/icons/*/.git; do
		# Don't update repo if it's a submodule
		if [[ ! -d "$i" ]]; then
			continue
		fi

		( echo $i; cd $i/..; git pull; )
	done
}

update_zsh_plugins() {
	has_command zsh || return 0

	log_step "Atualizando plugins do zsh..."
	zsh -ic "antidote update --bundles" || true
}

main "$@"
