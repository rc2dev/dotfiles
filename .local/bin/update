#!/usr/bin/env bash
#
# Commands to update my systems.
#
# Copyright (C) 2017-2023 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

set -euo pipefail
readonly dev_host="x220"

main() {
	declare -i step=0

	# Packages
	update_distro
	update_flatpaks
	update_pipx_packages

	# Dotfiles
	update_dotfiles
	update_submodules

	# Plugins
	update_nvim_plugins
	update_tmux_plugins
	update_zsh_plugins

	log "Concluído."
}

log() {
	printf "%s\n" "$*" 1>&2
}

log_step() {
	((step++)) || true

	log
	log "[ $step ] $*"
}

has_command() {
	command -v "$1" > /dev/null
}

is_termux() {
	[[ -n "${TERMUX_VERSION:-}" ]]
}

update_distro() {
	if is_termux; then
		log_step "Atualizando pacotes do Termux..."
		pkg upgrade

	elif has_command apt; then
		log_step "Atualizando pacotes do APT..."
		sudo apt update && sudo apt upgrade

	elif has_command dnf; then
		log_step "Atualizando pacotes do DNF..."
		sudo dnf upgrade --refresh

	else
		log "Atualização de pacotes não disponível para a sua distro."
	fi
}

update_flatpaks() {
	has_command flatpak || return 0

	log_step "Atualizando flatpaks..."
	flatpak update
}

update_dotfiles() {
	has_command dotfiles || return 0

	log_step "Atualizando dotfiles..."
	dotfiles pull
}

update_submodules() {
	has_command dotfiles || return 0
	[[ "$(hostname)" == "$dev_host" ]] || return 0

	log_step "Atualizando submódulos dos dotfiles..."
	dotfiles submodule update --remote
}

update_nvim_plugins() {
	has_command nvim || return 0
	[[ "$(hostname)" == "$dev_host" ]] || return 0

	log_step "Atualizando plugins do Neovim..."
	nvim +"lua if vim.g.lazy_did_setup then require('lazy').update({wait=true}) end" +qa
}

update_tmux_plugins() {
	has_command tmux || return 0

	# Return if no plugin is installed, to avoid error message
	if [[ $(find ~/.config/tmux/plugins -maxdepth 1 -type d | wc -l) -le 1 ]]; then
		return 0
	fi

	log_step "Atualizando plugins do tmux..."
	~/.config/tmux/plugins/tpm/bin/update_plugins all
}

update_zsh_plugins() {
	has_command zsh || return 0

	log_step "Atualizando plugins do zsh..."
	zsh "$ZDOTDIR/.antidote/antidote" update --bundles
}

update_pipx_packages() {
	has_command pipx || return 0

	log_step "Atualizando pacotes do pipx..."
	pipx upgrade-all
}

main "$@"
