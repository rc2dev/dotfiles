#!/usr/bin/env bash
#
# Commands to update my systems.
#
# Copyright (C) 2017-2022 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

set -euo pipefail

main() {
	declare -i step=0

	update_dotfiles
	update_repos
	update_ydl

	# Only run if interactive
	if [[ -t 0 ]]; then
		update_distro
		update_flatpaks
		update_nvim
		update_zinit
		update_submodules
	fi

	log "Concluído."
}

log() {
	printf "%s\n" "$*" 1>&2
}

log_step() {
	((step++)) || true

	log
	log "[ $step ] $*"
}

# args: prompt
# exit codes: 0 if yes, 1 if no
ask() {
	local -r prompt="$1"

	printf "\n"
	read -r -n 1 -p "> $prompt " answer
	printf "\n"

	if [[ ! "$answer" =~ [yYsS] ]]; then
		log "Pulando..."
		return 1
	fi

	return 0
}

# Workaround for syntax error
yadm() {
	bash "$HOME/.local/bin/yadm" "$@"
}

update_distro() {
	ask "Atualizar pacotes da distro?" || return 0

	# Update distro packages - order matters
	if is_osmc; then
		update_distro_osmc
	elif has_command apt; then
		update_distro_apt
	else
		log "Atualização de pacotes não disponível para a sua distro."
	fi
}

update_distro_apt() {
	# Termux doesn't have sudo
	local sudo
	has_command sudo && sudo=sudo

	log_step "Atualizando pacotes do APT..."
	$sudo apt update && $sudo apt full-upgrade -y

	log_step "Executando apt autoremove..."
	$sudo apt autoremove --purge --yes

	log_step "Limpando cache do APT..."
	$sudo apt clean
}

update_distro_osmc() {
	PS3="Como atualizar os pacotes? "
	select option in "Add-on (recomendado)" "APT"; do
		case $option in
			"Add-on (recomendado)" )
				log_step "Solicitando atualização ao add-on do OSMC..."
				kodi-send --host=127.0.0.1 --action='RunScript(/usr/share/kodi/addons/script.module.osmcsetting.updates/resources/lib/call_parent.py, update)'
				break
				;;
			"APT" )
				update_distro_apt
				break
				;;
		esac
	done
}

update_flatpaks() {
	has_command flatpak || return 0
	ask "Atualizar flatpaks?" || return 0

	log_step "Atualizando dotfiles..."
	flatpak update
}

update_dotfiles() {
	has_command yadm || return 0

	log_step "Atualizando dotfiles..."
	yadm pull
}

update_ydl() {
	(has_command pipx && pipx list | grep -q yt-dlp) || return 0

	log_step "Atualizando pacote yt-dlp do pipx..."
	pipx upgrade yt-dlp
}

update_nvim() {
	has_command nvim || return 0

	log_step "Atualizando plugins do Neovim..."
	nvim +PlugClean! +PlugUpdate +qa!
}

update_repos() {
	log_step "Atualizando repos em ~/..."

	# Don't output the glob if no directory found.
	shopt -s nullglob

	for i in $HOME/.local/opt/*/.git $HOME/.themes/*/.git $HOME/.local/share/icons/*/.git; do
		# Don't update repo if it's a submodule
		if [[ ! -d "$i" ]]; then
			continue
		fi

		( echo $i; cd $i/..; git pull; )
	done
}

update_zinit() {
	has_command zsh || return 0

	log_step "Atualizando zsh zinit..."
	zsh -ic "zinit update --parallel" || true
}

update_submodules() {
	has_command yadm || return 0
	ask "Atualizar submódulos dos dotfiles?" || return 0

	log_step "Atualizando submódulos yadm..."
	yadm submodule update --recursive --remote
}

is_osmc() {
	# Termux doesn't have this file, so we silence the errors
	[[ "$(cat /etc/issue 2>/dev/null)" == *"OSMC"* ]]
}

has_command() {
	command -v "$1" > /dev/null
}

main "$@"
