#!/usr/bin/env bash
#
# Commands to update my systems.
#
# Copyright (C) 2017-2023 Rafael Cavalcanti <https://rafaelc.org/dev>
# Licensed under GPLv3

set -euo pipefail
readonly script_name="$(basename "$0")"

main() {
	for chosen in $(chose); do
		eval "update_$chosen"
	done
}

chose() {
	if ! has_command whiptail; then
		log "Install whiptail before running this script."
		exit 1
	fi

	local choices=(
		distro        " " ON
		flatpaks      " " ON
		pipx_packages " " ON

		dotfiles      " " ON
		submodules    " " ON

		nvim_plugins  " " ON
		tmux_plugins  " " ON
	)

	# Whiptail theme
	export NEWT_COLORS="
	    root=white,black
	    border=black,lightgray
	    window=lightgray,lightgray
	    title=black,lightgray
	    button=black,cyan
	    actbutton=white,cyan
	    compactbutton=black,lightgray
	    checkbox=black,lightgray
	    actcheckbox=lightgray,cyan
	    entry=black,lightgray
	    disentry=gray,lightgray
	    label=black,lightgray
	    emptyscale=,gray
	    fullscale=,cyan
	    helpline=white,black
	    roottext=lightgrey,black
	"

	local -r title="$script_name"
	local -r prompt="Choose what to update:"

	whiptail --title "$title" --checklist "$prompt" 15 50 8 "${choices[@]}" 3>&2 2>&1 1>&3-
}

log() {
	local -r bold=$(tput bold)
	local -r green=$(tput setaf 2)
	local -r normal=$(tput sgr0)

	printf "\n$bold$green➝ [$script_name] %s$normal\n" "$*" 1>&2
}

has_command() {
	command -v "$1" > /dev/null
}

is_termux() {
	[[ -n "${TERMUX_VERSION:-}" ]]
}

update_distro() {
	if is_termux; then
		log "Atualizando pacotes do Termux..."
		pkg upgrade

	elif has_command apt; then
		log "Atualizando pacotes do APT..."
		sudo apt update && sudo apt upgrade

	elif has_command dnf; then
		log "Atualizando pacotes do DNF..."
		sudo dnf upgrade --refresh

	else
		log "Atualização de pacotes não disponível para a sua distro."
	fi
}

update_flatpaks() {
	if ! has_command flatpak; then
		log "Skipping flatpak update: not installed."
		return 0
	fi

	log "Atualizando flatpaks..."
	flatpak update
}

update_dotfiles() {
	if ! has_command dotfiles; then
		log "Skipping dotfiles update: not installed."
		return 0
	fi

	log "Atualizando dotfiles..."
	dotfiles pull
}

update_submodules() {
	if ! has_command dotfiles; then
		log "Skipping submodules update: dotfiles not installed."
		return 0
	fi

	log "Atualizando submódulos dos dotfiles..."
	dotfiles submodule update --remote
}

update_nvim_plugins() {
	if ! has_command nvim; then
		log "Skipping nvim plugins update: not installed."
		return 0
	fi

	log "Atualizando plugins do Neovim..."
	nvim +"lua if vim.g.lazy_did_setup then require('lazy').update({wait=true}) end" +qa
}

update_tmux_plugins() {
	if ! has_command tmux || [[ ! -d "$HOME/.config/tmux/plugins/tpm" ]]; then
		log "Skipping tmux plugins update: not installed."
		return 0
	fi

	log "Atualizando plugins do tmux..."
	~/.config/tmux/plugins/tpm/bin/install_plugins
	~/.config/tmux/plugins/tpm/bin/update_plugins all
}

update_pipx_packages() {
	if ! has_command pipx; then
		log "Skipping pipx packages update: pipx not installed."
		return 0
	fi

	log "Atualizando pacotes do pipx..."
	pipx upgrade-all
}

main "$@"
